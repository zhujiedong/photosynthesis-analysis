# LI-6800 JIP test 分析 {#sec-jiptest6800}

LI-6800 能够直接提供基本的叶绿素荧光参数，其他参数均可通过这些基本的参数进行计算，计算也较简单，在此不赘述，需要注意的是快相荧光部分的数据，因为分析 ojip 数据的模型有很多，多数情况下都需要大量的计算，在此我们先将其中较为简单的 jip test 数据分析进行介绍。

:::{.callout-tip}

## 提示

如果使用 LI-6800 的快相荧光做 OJIP 曲线的分析，建议使用连续光荧光信号的数据（带 dc 的函数），对于绝大多数参数来讲，使用调制光还是连续光并无差异，但是对于曲线面积的计算来讲，连续信号灯数据点要明显更多，这对计算有利。而且对于一些荧光信号偏低的样品，连续光信号可以明显提升信噪比（我使用的示例数据面积计算结果基本相同，这是因为我测量时信噪比明显比较高的原因）。
:::


## jip test 的实现 {#sec-jiptest}

分析依赖于我写的 `jiptest` 软件包，去年冬天（2020.11）我修改了一次，其中我希望大改的是求曲线下部面积的部分，**因为曲线形状不规则，需要用到积分，我用的现成的软件包，而且印象里求面积没有使用标准化后的数据来进行计算，所以不太合适，这个我争取近期找时间来解决一下，这里先立一个 flag，**安装可以按照下面的方式：

```{r}
#| eval: false
remotes::install_github("zhujiedong/jiptest")
# 或
remotes::install_git('https://gitee.com/zhu_jie_dong/jiptest')
```

## `read_files` 及 `read_dcfiles` 函数 {#readfluor}

`read_files` 用于批量读取所有调制光测量数据，方便用于其他的数据分析。**函数要求所有数据必须是 `xlsx` 格式，并且所有测量数据都保存在同一文件夹内。**，如有其他文件或测量数据则会报错。
`read_dcfiles` 用于批量读取所有连续光测量数据，其他选项与 `read_dcfiles` 相同。例如在了 data文件夹下的 ojip 文件夹内，有五个数据文件。

函数仅有一个参数，即保存数据文件夹的路径，使用如下：

读取调制光测量数据：

```{r}
library(jiptest)
jip_data<- read_files("data/ojip")
```

读取连续光数据：

```{r, dcjipdata, message=FALSE}
jip_dcdata <- read_dcfiles("data/ojip")
```

调制光的信号前 10 行数据：

```{r}
#| label: mod-data
#| echo: false
#| tbl-cap:   


kable(head(jip_data),
      caption = 'jiptest 批量导入数据后的样式 {#tbl-ac-importdata}')
```

连续光的信号前 10 行数据：

```{r}
#| label: dc-data
#| echo: false
#| tbl-cap: 

kable(head(jip_dcdata), 
caption = 'jiptest DC 数据批量导入数据后的样式 {#tbl-dc-importdata}')
```

:::{.callout-note}
## 注意

NORM_FLUOR 是标准化后的荧光信号数据，其中标准化采用的方式是 @stirbetChlorophyllFluorescenceInduction2012 所采用的：$F = \frac{F_t - F_o}{F_m - F_o}$，而曲线上部的面积则采用 @stirbetRelationKautskyEffect2011 的方式进行标准化，以方便不同叶片之间的比较，具体为 $area = \frac{area}{F_m - F_o}$
:::

## `jip_test` 及 `jip_dctest` 函数 {#sec-testfluor}

 `jiptest` 是 jiptest 的核心函数，用于所有数据的 `jiptest` 分析，函数仅包一个参数，测量数据的保存文件夹路径。
 `jip_dctest` 与 `jip_test` 相似，用于连续光测量数据的分析。
 
```{r}
actest <- jip_test("data/ojip")
```

```{r}
dctest <- jip_dctest("data/ojip")
```


调制光信号的计算参数：

```{r}
#| echo: false

names(actest) <- c("parameters",
                   "data_file1",
                   "data_file2",
                   "data_file3",
                   "data_file4",
                   "data_file5")
datatable(actest,
          caption = 'jiptest 输出的调制光计算参数')
```

连续光信号计算参数：

```{r}
#| echo: false

names(dctest) <- c("parameters",
                   "data_file1",
                   "data_file2",
                   "data_file3",
                   "data_file4",
                   "data_file5")
datatable(dctest,
          caption = 'jiptest输出的连续光计算参数')
```

可以看出，对于标准化之后的参数，二者基本一致，原始信号则无法一致，因为连续光信号强度更高（所以数据的比较要在相同的测量光内进行）。
。若需要将数据导出，可以使用相关命令：

```{r}
#| eval: false

write.csv(actest, "d:/data/jip_resluts.csv")
write.csv(dctest, "d:/data/dcjip_resluts.csv")
```

## 图像查看函数 {#sec-plotfluor}

如果仅仅是简单查看结果，那么我们直接用默认参数就好，作图的数据是之前导入的数据文件：

默认使用标准化的荧光信号（也就是除以最大值，标准化到 0~1 之间，LI-6800 在 1.4 之后的版本也提供了仪器上查看的界面）。

### 默认图形的方式 {#sec-default-plot-jiptest}

1. 默认调制光图形 

```{r}
#| label: fig-default-moulation-plot-ac
#| fig.cap: '默认调制光图形查看'

plot(jip_data)
```

2. 默认连续光图形 

```{r}
#| label: fig-default-moulation-plot-dc
#| fig.cap: '默认连续光图形查看'

plot(jip_dcdata)
```

默认图形，仅仅查看结果是可以的，当然有些情况下需要进行调整才方便做展示用。

### 定制化图形的方式 {#sec-customized-plot-jiptest}

这个是这次改动的重点之一，例如都使用原始信号分别做上面两幅图：

1. 定制调制光图形

这里使用原始荧光信号，然后更改图例颜色等，主要是 `add_leg = FALSE` 不增加默认的图例，以及 `normalized = FALSE` 不使用信号标准化。其他请参考帮助 `?plot.jip`。 我简单写了一下帮助文档，大家应该基本能看明白，我~~暂时~~一直没时间详细了写。

```{r}
#| label: fig-cus-ac-plot-leg-cls
#| fig.cap: '定制调制光图形示例'

cls <- palette.colors(n = 5,  "set 2", alpha = 0.8)
plot(
  jip_data,
  ylab = 'Normalized fluorescence signals',
  add_leg = FALSE,
  def_pch = 14:18,
  col = cls,
  main = "Demodulated signals",
  normalized = FALSE
)

legend(
  "topleft",
  unique(jip_data$SOURCE),
  col = cls,
  pch = 14:18,
  cex = 0.6,
  pt.cex = 1.2,
  bty = "n"
)
```

2. 定制连续光图形

连续光图形，例如修改图例的位置以及不显示标准化的数据。

```{r}
#| label: fig-cus-dc-plot-leg-cls
#| fig.cap: '定制连续光图形示例'

plot(jip_dcdata, legend_pos = "bottomright", normalized = FALSE)
```

:::{.callout-note}

## 注意

关于标准化和非标准化图形差异大的问题，这个比较简单，原始信号比较低的那条线，是不同物种的不同叶片，所以不具备比较价值，我只是程序测试。
:::


:::{.callout-tip}

## 提示

建议在开始分析数据前，使用作图查看数据质量，若使用调制光数据测量的荧光信号太弱，数据点太散，则可以使用连续光测量信号进行分析，对于归一化的荧光参数，二者几乎无差别。最好的方式当然是在测量时注意荧光信号强度，若基础荧光信号太弱，尝试增加测量叶片的面积，增强荧光信号强度，增大信噪比。
:::


## 关于 Area 和 Sm 参数计算的说明 {#sec-stdsm-area}

具体参数的计算参考了 @tsimilli_revisiting2019 和 @bussotti_jip_2010，时间轴的单位是 ms。

在最初的版本中，面积计算原本是用了了一个 三次项样条插值来将数据点拟合为一条曲线，然后对曲线进行计算，前几天有客户询问我计算报错，我只能看出来那是积分错误，但我不知道原因，因为积分的方法我是用的一个叫做 `MASS` 包来处理的，它有一些问题需要处理：

1. `MASS` 有时候改动会导致计算面积不能使用，这个发生过一次，好在改动不是特别大，我修改了之后就能用了。但这就是个问题，依赖别人的软件包，作者我也不认识，人家更新不会通知我，也不会管我能不能用。

2. 样条插值尽管拟合效果不错，但总会因为 J 点和 I 点的拐点导致拟合不佳的情况出现，这样子会带来一定的误差来源。

3. 基本出错我很难定位具体原因。

基于上面这些原因，我使用了下面的方式对面积计算进行修改，当然下面演示的是原理部分，所以我只计算曲线下部面积，反正上部面积是总面积减去下部面积，所以这个不影响最终计算，也能简化我对计算方式的描述。

### 曲线下部面积的计算 {#sec-auc-explain}

计算方法依据这里 [Sotos](https://stackoverflow.com/questions/4954507/calculate-the-area-under-a-curve)  的回答来进行。

基本思路是这样，既然一种积分的方式是将曲线划分为很多个梯形，然后求其总面积。因为我的数据点数量非常大（通常 250 kHz 的调制频率），那么实际上我已经在 1 s 的测量时间内，将曲线划分为 250 kHz - 1 个梯形了（理论上最大值，实际没这么多），那我干脆不用拟合来做曲线，就直接用线连接所有数据点，不久避免了拟合不准确的问题了吗？为简化流程，我将梯形看做矩形，长度使用 2 点滚动平均值来计算，减少误差。因此，下面的内容就是用连续光信号来验证这个观点。


```{r}
# 使用的软件包
library(zoo)
# 导入依次 OJIP 测量整理好的数据
ac <- read.csv("data/dctest.csv")

# 将数据里的 s 转化为 ms
ac$SECS <- (ac$SECS)*1000

# 使用对数的时间轴
ac$logs <- log(ac$SECS)

# 找到 FO点，因为计算是 OJIP 时间段内的数据
j <- which(ac$FLUOR == max(ac$FLUOR))
# 只选择需要的数据
ac <- ac[1:j,]
# 数据的行数
n <- nrow(ac)

# 使用上面叙述的原理来计算总面积
auc <- with(ac, sum(diff(logs)*rollmean(FLUOR,2)))
auc

# 滚动平均值使用的数据，也就是矩形的长
roll <- with(ac, rollmean(FLUOR,2))

# 按照相邻两点多最大值计算最大的误差
auc_max_rect <- with(ac, sum(diff(logs)* FLUOR[2:n]))

# 计算的 sm 参数的最大误差
sm_error <- (auc_max_rect - auc)/(max(ac$FLUOR) - min(ac$FLUOR))
```


这里 Area 误差从数值上看上去不小，但这是没有标准化后的荧光信号强度，实际并不大，而且没有标准化的数据在荧光参数里多数没有比较的价值，我们看一下标准化后的 Sm 参数：

```{r}
#| label: sm_error
sm_error
```

这个数值是 `r sm_error`，也就是最大的误差是这个数据，但实际上我们按照梯形最高的边来作为矩形的长来计算的最大面积，这个面积对数据高估了，实际上的误差应该略大于 sm_error/2，也就是 `r sm_error/2`，相比于我们的实验来讲，这个小数点后第三位的误差可以忽略不计。

通过图形我们可以直观的观察一下结果：

```{r}
#| label: fig-auc-compare
#| fig.cap: '比较使用简化方式计算面积与原来数据点连线之间的差异'

#比较原来数据点的线与使用滚动平均值的线的差异
plot(ac$logs, ac$FLUOR)
for (i in (1:(n-1))){
  rect(ac$logs[i], 0, ac$logs[i+1], ac$FLUOR[i+1])
  rect(ac$logs[i], 0, ac$logs[i+1], roll[i], border = 'red')
}
```


通过 @fig-auc-compare 我们能够看到，二者差异非常小(黑色是原始测量数据，红色为使用滚动平均值的数据)，即使是些微低估，也是所有的处理都存在这个情况，总比有的样条插值拟合曲线好，有的拟合不好要来得一致一些。而对于标准化之后的面积 Sm，那么小数点后第三位的误差，不会对结果造成明显影响，因为这个面积个位数或者十位数是普遍现象。



