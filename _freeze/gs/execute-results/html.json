{
  "hash": "103849b294511e2d6499a6bbd4bbb381",
  "result": {
    "engine": "knitr",
    "markdown": "# 气孔导度模型的拟合 {#sec-stamotal_sim}\n\n在~~暂时还没时间~~多年没时间整理的情况下，先简单记录一下基本操作。\n\n## `plantecophys` 气孔导度相关函数 {#sec-plantecophys-stamo}\n\n### `fitBB` 函数 {#sec-fitbb-p}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfitBB(\n  data,\n  varnames = list(\n    ALEAF = \"A\",\n    GS = \"gsw\",\n    VPD = \"VPDleaf\",\n    Ca = \"CO2_s\",\n    RH = \"RHcham\"\n  ),\n  gsmodel = c(\"BBOpti\", \"BBLeuning\", \"BallBerry\",\n              \"BBOptiFull\"),\n  fitg0 = FALSE\n)\n```\n:::\n\n\n\n**参数的意义:**\n\n* data：待分析的数据文件。 \n* varnames：注意，函数默认数据为 6400 格式，因此 6800 的数据文件要按照上文的参数修改。 相对湿度只有在使用  BallBerry 时才需要输入。\n* gsmodel：上述三个模型之一。\n* fitg0：默认不计算g0，若需要，改为TRUE。\n\n**代码示例：**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plantecophys)\n\naci <- read.csv(\"data/aci.csv\")\naci <- subset(aci, Obs > 0)\nfitBB(\n  aci,\n  varnames = list(\n    ALEAF = \"Photo\",\n    GS = \"Cond\",\n    VPD = \"VpdL\",\n    Ca = \"CO2S\",\n    RH = \"RH_S\"\n  ),\n  gsmodel = \"BBOpti\",\n  fitg0 = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResult of fitBB.\nModel :  BBOpti \nBoth g0 and g1 were estimated.\n\nCoefficients:\ng0  g1\n0.326 -0.992 \n\nFor more details of the fit, look at summary(myfit$fit)\nTo return coefficients, do coef(myfit).\n(where myfit is the name of the object returned by fitBB)\n```\n\n\n:::\n:::\n\n\n### `fitBBs` 函数 {#sec-fitbbs}\n\n如果我们有多个物种或分组的数据，那么使用  `fitBBs`  则可以快速拟合多条曲线的数据。我们先整合两次的数据，然后来查看一下运行结果：\n\n\n::: {.cell}\n\n```{.r .cell-code}\naci01 <- read.csv(\"data/aci01.csv\")\naci01 <- subset(aci01, Obs > 0)\nmultiBB <- data.frame(\n  A = c(aci$Photo, aci01$Photo),\n  GS = c(aci$Cond, aci01$Cond),\n  CO2S = c(aci$CO2S, aci01$CO2S),\n  VPD = c(aci$VpdL, aci01$VpdL),\n  RH = c(aci$RH_S, aci01$RH_S),\n  species = c(rep(\"species1\", length(aci$Photo)),\n              rep(\"species2\", length(aci01$Photo)))\n)\n\nmod2 <- fitBBs(\n  multiBB,\n  group = \"species\",\n  varnames = list(\n    ALEAF = \"A\",\n    GS = \"GS\",\n    VPD = \"VPD\",\n    Ca = \"CO2S\",\n    RH = \"RH\"\n  ),\n  gsmodel = \"BallBerry\",\n  fitg0 = TRUE\n)\n```\n:::\n\n\n结果为：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(mod2)\n```\n:::\n\n::: {.cell tbl-cap='{}'}\n::: {.cell-output-display}\n\n\nTable: fitBBs 的结果{#tbl-plt-eco-kab}\n\n|group    |        g0|         g1|\n|:--------|---------:|----------:|\n|species1 | 0.3263885| -0.1734554|\n|species2 | 0.0515873| -0.0218842|\n\n\n:::\n:::\n\n\n## `photosynthesis` 气孔导度相关函数 {#sec-photosynthesi-stamo}\n\n### 无分组模型的实现过程 {#sec-single-photo-stamo}\n\n内容与上面 的重复，这里不在运行，仅列出代码。\n\n读取数据：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(photosynthesis)\ndf <- read.csv(\"data/A_Ci_Q_data_1.csv\")\n```\n:::\n\n\nBallBerry 模型需要相对湿度，而 LI-6800 的相对湿度数据实际上是转换为百分数后的数据，因此需要处理一下，然后这个函数的方便之处是，它可以一次拟合出所有的模型来：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$RH <- df$RHcham / 100\n\nfits <- fit_gs_model(\n  data = df,\n  varnames = list(\n    A_net = \"A\",\n    C_air = \"Ca\",\n    g_sw = \"gsw\",\n    RH = \"RH\",\n    VPD = \"VPDleaf\"\n  ),\n  model = c(\"BallBerry\",\n            \"Leuning\",\n            \"Medlyn_partial\",\n            \"Medlyn_full\"),\n  D0 = 3\n)\n```\n:::\n\n\n函数的参数其实都比较简单，如果对非线性拟合不满意，也可以传入 `nlsLM` 的参数。\n\n#### 结果的查看 {#sec-photo-stoma-result}\n\n`fit_gs_model` 结果有两个水平，第一层 list 是拟合模型，第二层则是模型相关的参数、图形等，可以通过位置查看：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits[[1]][1]\nfits[[1]][2]\nfits[[1]][3]\n```\n:::\n\n\n也可以通过名称查看：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits$BallBerry$Parameters\nfits$Leuning$Graph\nfits$Medlyn_partial$Parameters\nfits$Medlyn_full$Parameters\n```\n:::\n\n\n### 分组模型的实现 {#sec-multi-photo-stoma}\n\n分组数据处理起来也比较方便，例如下面以光强为分组，`photosynthesis` 提供了两个方便的函数，帮助进行分组数据的操作，`fit_many` 用于选择函数用于分组数据，`compile_data` 用于将 `list` 结果转为 `dataframe`：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Q_2 <- as.factor(round(df$Qin, digits = 0))\n\nfits <- fit_many(\n  df,\n  varnames = list(\n    A_net = \"A\",\n    C_air = \"Ca\",\n    g_sw = \"gsw\",\n    RH = \"RH\",\n    VPD = \"VPDleaf\"\n  ),\n  funct = fit_gs_model,\n  group = \"Q_2\"\n)\n```\n:::\n\n\n数据的查看比之前又多了一个水平，例如 750 光强下的数据：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits[[\"750\"]][[\"Medlyn_partial\"]][[\"Parameters\"]]\n```\n:::\n\n\n这里转换过程分两部，首先是将所有的参数转为 `list` 形式，转换对象是 1，也就是第一个模型 BallBerry。然后再将这个 `list` 进行一次转换，不同分组的参数 `Parameters`（顺序可参考未分组数据的结果）：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbmods <- compile_data(data = fits,\n                     output_type = \"list\",\n                     list_element = 1)\nbbpars <- compile_data(data = bbmods,\n                     output_type = \"dataframe\",\n                     list_element = 2)\n\nbbpars$ID <- as.numeric(bbpars$ID)\n\nplot(g0 ~ ID, bbpars)\n```\n:::\n\n\n最后展示的图形是不同光强下，拟合的截距的差异。多个图形也可以使用这种方式转换，不过存储的类型最好是 `list`（存储的是 `ggplot2` 对象的类）。例如 `vignette` 使用下面的方式查看第三幅图的结果。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphs <- compile_data(data = bbmods,\n                       output_type = \"list\",\n                       list_element = 3)\n\ngraphs[[3]]\n```\n:::\n\n\n## 光合最优气孔导度耦合模型 {#stomotal_couple}\n\n@Cowan1977Stomatal 关于最优气孔导度的描述概括如下：\n最优气孔行为理论认为气孔的最优化行为，指的是在某一时间段内， 最大化的进行光合碳固定的同时最小化的进行蒸腾作用，也就是说，对于一定的水分消耗，得到最大化的光合碳固定。即使得：\n\n$$\nA - \\lambda E\n$${#eq-weff}\n\n最大化，其中 $\\lambda$ 是临界水分利用效率，也即植物损耗单位水分的 C 生产量，单位一般为 $mol \\: CO_2 \\cdot mol^{-1} H_2O$，可通过光合速率和蒸腾速率的比值计算。`plantecophys` 包含了相关的函数来处理。\n\n### `FARAO` 函数 {#sec-farao}\n\n`FARAO` 函数用于找到最大化 $A - \\lambda E$ 解的** Ci **值，这里是利用数值解的形式求解方程。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFARAO(lambda = 0.002, Ca = 400, VPD = 1,\n      photo = c(\"BOTH\", \"VCMAX\",\"JMAX\"), \n      energybalance = FALSE, C4 = FALSE, \n      Tair = 25, Wind = 2, Wleaf = 0.02,\n      StomatalRatio = 1, LeafAbs = 0.86, ...)\n\nFARAO2(lambda = 0.002, Ca = 400, \n       energybalance = FALSE, ...)\n```\n:::\n\n\n其参数同 `fitaci` 和 `Photosyn`，在此不多做介绍，`FARAO` 使用的是 @Cowan1977Stomatal 的方法得到最优化的 Ci 值, `FARAO2` 则更简单或可能更稳定，利用 @Buckley2014Is 的方法来计算, @Medlyn2011Reconciling 的方法是这个数值解的近似值。\n\n## 光合气孔导度耦合模型 {#sec-photo_stomo}\n\n@Duursma2015Plantecophys 对于气体交换耦合模型的简述如下：\n\n* 对于 FvCB 模型有：\n\n$$\nA_n = min(A_c, A_j)-R_d\n$${#eq-minfvcb}\n\n* 在假定 gm 为恒定的前提下：\n\n$$\nC_c = C_i - \\frac{A_n}{g_m}\n$${#eq-cgm}\n\n* 根据 Ficker 定理\n\n$$\nA_n = \\frac{g_s}{1.6}(C_a - C_i)\n$${#eq-ficker}\n\n以及 BallBerry 气孔导度模型\n$$\ng_s = g_0 + g_1 \\frac{A_n}{C_a} f(D)\n$${#eq-driver}\n\n整合公式 @eq-minfvcb, @eq-cgm, @eq-ficker 和  @eq-driver 后得到气体交换的耦合模型，气体交换耦合模型有很多更大尺度上的应用，例如 @Duursma2012MAESPA 和 wang1998a，可用于预测 An，gs 和蒸腾速率对主要环境驱动因子的响应（除土壤水分），并包含了主要的叶片性状（g1，V~cmax~, J~max~, R~d~ 以及他们的温度依赖性）。\n\n### `Photosyn` 函数 {#sec-photosyn}\n\nPhotosyn 为耦合的光合–气孔导度模型，基于 Farquhar 光合模型和 Ball-Berry 气孔导度模型。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPhotosyn(VPD = 1.5, Ca = 400, PPFD = 1500,\n         Tleaf = 25, Patm = 100,RH = NULL,\n         gsmodel = c(\"BBOpti\", \"BBLeuning\", \n                     \"BallBerry\", \"BBdefine\"),\n         g1 = 4, g0 = 0, gk = 0.5, vpdmin = 0.5,\n         D0 = 5, GS = NULL, BBmult = NULL, \n         alpha = 0.24, theta = 0.85, Jmax = 100,\n         Vcmax = 50, gmeso = NULL, TPU = 1000, \n         alphag = 0, Rd0 = 0.92, Q10 = 1.92,\n         Rd = NULL, TrefR = 25, Rdayfrac = 1, \n         EaV = 82620.87, EdVC = 0, delsC = 645.1013, \n         EaJ = 39676.89, EdVJ = 2e+05, delsJ = 641.3615,\n         GammaStar = NULL, Km = NULL, Ci = NULL, \n         Tcorrect = TRUE,returnParsOnly = FALSE,\n         whichA = c(\"Ah\", \"Amin\", \"Ac\", \"Aj\"))\n\nAci(Ci, ...)\n```\n:::\n\n\n因为是光合气孔导度模型的耦合，故而参数与之前的函数相同，参见 @sec-fitbb-p 和 @sec-aci-fitting 部分的内容。\n\n#### `Photosyn` 使用举例 {#sec-photo_exam}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plantecophys)\n# 仅使用下面几个参数运行模型\n#（其他参数使用默认值）\n# 利用已测量或计算的参数\nPhotosyn(VPD=2, g1=4, Ca=500)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Ci    ALEAF        GS    ELEAF       Ac       Aj   Ap   Rd VPD Tleaf\n1 369.3981 14.19466 0.1706377 3.412753 15.12654 17.03685 1000 0.92   2    25\n   Ca       Cc PPFD Patm\n1 500 369.3981 1500  100\n```\n\n\n:::\n\n```{.r .cell-code}\n# 部分参数相同，而某一参数或某几个参数不同时，\n# 可以将不同的参数设置为一个序列（vectors）\nr <- Photosyn(VPD=seq(0.5, 4, length=25), \n              Vcmax=50, Jmax=100)\nwith(r, plot(VPD, ALEAF, type='l'))\n```\n\n::: {.cell-output-display}\n![VPD VS. An](gs_files/figure-html/fig-vpd-1.png){#fig-vpd width=672}\n:::\n:::\n\n\n@fig-vpd 显示了不同 VPD 下的光合速率。\n\n\n\n::: {.cell abel='fig-ppfd'}\n\n```{.r .cell-code}\n# 设定叶肉导度的拟合\nrun1 <- Photosyn(PPFD=seq(50,1000,length=25), \n                 gmeso=0.15, Vcmax=40, Jmax=85)\nwith(run1, plot(PPFD, GS, type='l'))\n```\n\n::: {.cell-output-display}\n![PPFD VS. GS](gs_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 运行ACi曲线数据（提供Ci值而不是计算）\narun1 <- Aci(Ci=seq(50, 1200, length=101), \n             Vcmax=40, Jmax=85)\narun2 <- Aci(Ci=seq(50, 1200, length=101), \n             Vcmax=30, Jmax=70)\nwith(arun1, plot(Ci, ALEAF, type='l'))\nwith(arun2, points(Ci, ALEAF, type='l', lty=5))\n```\n\n::: {.cell-output-display}\n![PPFD VS. GS](gs_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n:::\n\n\n@fig-ppfd 显示不同 C~i~ 下的光合速率。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 找出CO2需求和供给的交叉点\n# 设定部分参数\ngs <- 0.2 # 对水的气孔导度\nCa <- 400 # 外部CO2\ngctogw <- 1.57 # 转换系数\ngc <- gs / gctogw # 对 CO2 的气孔导度\n# 需求曲线\np <- Aci(seq(60,500,length=101), Ca=400)\n# 提供气孔导度及交叉点\ng <- Photosyn(GS=gs, Ca=Ca)\n# 交叉点可视化\npar(yaxs=\"i\")\nwith(p, plot(Ci, ALEAF, type='l', \n             ylim=c(0,max(ALEAF))))\nwith(g, points(Ci, ALEAF, pch=19, col=\"red\"))\nabline(gc * Ca, -gc, lty=5)\nlegend(\"topleft\", c(expression(\n  \"Demand:\"~~A==f(C[i])),\n   expression(\"Supply:\"~~A==g[c]*(C[a]-C[i])),\n              \"Operating point\"),\n   lty=c(1,5,-1),pch=c(-1,-1,19),\n   col=c(\"black\",\"black\",\"red\"),\n   bty='n', cex=0.9)\n```\n\n::: {.cell-output-display}\n![supply VS. demand](gs_files/figure-html/fig-supply-1.png){#fig-supply width=672}\n:::\n:::\n\n\n@fig-supply 需求与供给的关系。\n\n### `PhotosynEB` 函数 {#photsyneb}\n\n使用同 `Photosyn`，只不过使用能量平衡法来计算叶温。\n\n:::{.callout-warning}\n\n## 警告\n\n目前版本尚存在bug，不能直接提供 GS 来计算，否则会出现未知错误。\n:::\n\n### `PhotosynTuzet` 函数 {#sec-photosyntuzet}\n\n同样为光合气孔导度耦合模型，只不过基于 @tuzet2003a 的气孔导度模型，现将其描述如下：\n\n$$\ng_{co2} = g_0 + \\frac{a A}{C_i - \\Gamma} f_{\\Psi v}\n$${#eq-tuzet}\n\n其中 g~co2~ 为对 CO~2~ 的气孔导度， g~0~ 是残余导度（residual conductance）(在补偿点时限制 g~CO2~ 的值）， A 为光合速率，C~i~ 为胞间二氧化碳浓度，$\\Gamma$ 为 CO~2~ 补偿点，a 是经验系数。\n\n一个根据经验的逻辑方程用于描述气孔对水势的敏感性：\n\n$$\nf_{\\Psi v} = \\frac{1 + exp(s_f \\Psi_f)}{1 + exp(s_f(\\Psi_f - \\Psi_v))}\n$${#eq-ftuzet}\n\n$\\Psi_v$ 是指叶片水势，$\\Psi_f$ 是参比势能， 该方程假设在水势接近于 0 时，气孔对叶片水势不敏感，并且气孔随着 $\\Psi_v$ 的下降快速关闭。$\\Psi_f$ 和 $s_f$ (曲线形状参数) 依赖于不同物种的形态学适应以及生长过程中所处的环境。\n\n#### `PhotosynTuzet` 的参数 {#sec-photosyntuzet_para}\n\n除 @tuzet2003a 模型中使用的参数外，其他参数都继承了 `Photosyn` 的参数\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPhotosynTuzet(g1 = 8, Ca = 400, psis = 0,\n              kl = 2, sf = 3, psif = -2,\n...)\n```\n:::\n\n\n* g1：斜率参数，要远比 `fitBB` 中的大。\n* Ca：外界大气 CO~2~ 浓度\n* psis，土壤水势（Mpa）。\n* kl：Leaf-speciﬁc hydraulic conductance（叶片导水参数 ($mmol \\cdot m^{-2} \\cdot s^{-1} \\cdot MPa^{-1}$)，叶片蒸腾量、叶片面积及叶片水势计算）。\n* sf：曲线形状参数。\n* 在气孔导度为最大值 50% 时的叶片水势。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}